if (typeof (EQL) === "undefined") { EQL = {}; }
if (typeof (EQL.WebResource) === "undefined") { EQL.WebResource = {}; }
if (typeof (EQL.WebResource.CommonScripts) === "undefined") { EQL.WebResource.CommonScripts = {}; }

EQL.WebResource.CommonScripts.setStatusReason = function (executionContext, entityLogicalName, recordId, statecode, statuscode) {
    "use strict"
    var id = recordId.replace("{", "").replace("}", "");
    var data = {
        "statecode": statecode,
        "statuscode": statuscode
    };
    try {
        Xrm.WebApi.updateRecord(entityLogicalName, id, data).then(function success(result) {
            executionContext.data.refresh(false);
        }, function (e) {
            throw e.message;
        });
    } catch (e) {
        throw e.message;
    }
};

// This REGEX validation is intended for onChange events
EQL.WebResource.CommonScripts.getRegexResult = function (regex, valueToValidate) {
    "use strict";
    try {
        let matchResult = regex.test(valueToValidate);
        return matchResult;
    }
    catch (e) {
        throw e.message;
    }
};

// This REGEX validation is intended for onSave events
EQL.WebResource.CommonScripts.onSaveRegexValidation = function (executionContext, regex, fieldName) {
    "use strict";
    try {
        let returnValue = false;
        let formContext = executionContext.getFormContext();
        let fieldValue = formContext.getAttribute(fieldName).getValue();
        //If Field Value is not Null
        if (fieldValue !== null) {
            //Set REGEX for checking the ABN format
            let fieldRegexResult = EQL.WebResource.CommonScripts.getRegexResult(regex, fieldValue);
            // Check if ABN matches the correct format
            if (fieldRegexResult === true) {
                //Check duplicate ABN in other EWR record
                returnValue = true;
            }
        }
        //If Field Value is Null
        else {
            returnValue = true;
        }
        return returnValue;
    }
    catch (e) {
        throw e.message;
    }
};

// This will retrieve all the security roles associated to the login user
EQL.WebResource.CommonScripts.checkUserRole = function (roleName1, roleName2) {
    "use strict"
    var roles = Xrm.Utility.getGlobalContext().userSettings.roles;

    if (roles === null) return false;

    var hasRole = false;

    roles.forEach(function (item) {
        if (roleName1 !== "" && roleName2 === "") {
            if (item.name.toLowerCase() === roleName1.toLowerCase()) {
                hasRole = true;
            }
        }
        else if (roleName1 !== "" && roleName2 !== "") {
            if (item.name.toLowerCase() === roleName1.toLowerCase() || item.name.toLowerCase() === roleName2.toLowerCase()) {
                hasRole = true;
            }
        }

    });



    return hasRole;
};

EQL.WebResource.CommonScripts.GetNMI = async function (nmi) {
    await Xrm.WebApi.retrieveMultipleRecords("cmx_virtualnmi", "?$select=cmx_name&$filter=cmx_name eq '"+nmi+"'").then(
        function success(result) {
            for (var i = 0; i < result.entities.length; i++) {
                console.log(result.entities[i]);
            }                    
            // perform additional operations on retrieved records
        },
        function (error) {
            console.log(error.message);
            // handle error conditions
        }
    );
};

EQL.WebResource.CommonScripts.ShowProgressIndicator = function () {
    Xrm.Utility.showProgressIndicator("Please wait a moment");
};

EQL.WebResource.CommonScripts.CloseProgressIndicator = function () {
    Xrm.Utility.closeProgressIndicator();
};

EQL.WebResource.CommonScripts.GetDayFromDate = function (dayValue) {

    let day = null;
    switch(dayValue) {
        case 0:
            day = "Sunday";
            break;
        case 1:
            day = "Monday";
            break;    
        case 2:
            day = "Tuesday";
            break;
        case 3:
            day = "Wednesday";
            break;
        case 4:
            day = "Thursday";
            break;
        case 5:
            day = "Friday";
            break;
        case 6:
            day = "Saturday";
            break;
        default:
            break;
    }

    return day;
};